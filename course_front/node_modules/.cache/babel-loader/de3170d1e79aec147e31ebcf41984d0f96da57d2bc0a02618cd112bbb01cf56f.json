{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction e(e, t) {\n  for (var n = 0; n < t.length; n++) {\n    var r = t[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n  }\n}\nfunction t(t, n, r) {\n  return n && e(t.prototype, n), r && e(t, r), t;\n}\nfunction n() {\n  return (n = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n    }\n    return e;\n  }).apply(this, arguments);\n}\nfunction r(e, t) {\n  e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t;\n}\nfunction i(e, t) {\n  if (null == e) return {};\n  var n,\n    r,\n    i = {},\n    o = Object.keys(e);\n  for (r = 0; r < o.length; r++) t.indexOf(n = o[r]) >= 0 || (i[n] = e[n]);\n  return i;\n}\nfunction o(e) {\n  return 1 == (null != (t = e) && \"object\" == typeof t && !1 === Array.isArray(t)) && \"[object Object]\" === Object.prototype.toString.call(e);\n  var t;\n}\nvar u = Object.prototype,\n  a = u.toString,\n  f = u.hasOwnProperty,\n  c = /^\\s*function (\\w+)/;\nfunction l(e) {\n  var t,\n    n = null !== (t = null == e ? void 0 : e.type) && void 0 !== t ? t : e;\n  if (n) {\n    var r = n.toString().match(c);\n    return r ? r[1] : \"\";\n  }\n  return \"\";\n}\nvar s = function (e) {\n    var t, n;\n    return !1 !== o(e) && \"function\" == typeof (t = e.constructor) && !1 !== o(n = t.prototype) && !1 !== n.hasOwnProperty(\"isPrototypeOf\");\n  },\n  v = function (e) {\n    return e;\n  },\n  y = v;\nif (\"production\" !== process.env.NODE_ENV) {\n  var p = \"undefined\" != typeof console;\n  y = p ? function (e) {\n    console.warn(\"[VueTypes warn]: \" + e);\n  } : v;\n}\nvar d = function (e, t) {\n    return f.call(e, t);\n  },\n  h = Number.isInteger || function (e) {\n    return \"number\" == typeof e && isFinite(e) && Math.floor(e) === e;\n  },\n  b = Array.isArray || function (e) {\n    return \"[object Array]\" === a.call(e);\n  },\n  O = function (e) {\n    return \"[object Function]\" === a.call(e);\n  },\n  g = function (e) {\n    return s(e) && d(e, \"_vueTypes_name\");\n  },\n  m = function (e) {\n    return s(e) && (d(e, \"type\") || [\"_vueTypes_name\", \"validator\", \"default\", \"required\"].some(function (t) {\n      return d(e, t);\n    }));\n  };\nfunction j(e, t) {\n  return Object.defineProperty(e.bind(t), \"__original\", {\n    value: e\n  });\n}\nfunction _(e, t, n) {\n  var r;\n  void 0 === n && (n = !1);\n  var i = !0,\n    o = \"\";\n  r = s(e) ? e : {\n    type: e\n  };\n  var u = g(r) ? r._vueTypes_name + \" - \" : \"\";\n  if (m(r) && null !== r.type) {\n    if (void 0 === r.type || !0 === r.type) return i;\n    if (!r.required && void 0 === t) return i;\n    b(r.type) ? (i = r.type.some(function (e) {\n      return !0 === _(e, t, !0);\n    }), o = r.type.map(function (e) {\n      return l(e);\n    }).join(\" or \")) : i = \"Array\" === (o = l(r)) ? b(t) : \"Object\" === o ? s(t) : \"String\" === o || \"Number\" === o || \"Boolean\" === o || \"Function\" === o ? function (e) {\n      if (null == e) return \"\";\n      var t = e.constructor.toString().match(c);\n      return t ? t[1] : \"\";\n    }(t) === o : t instanceof r.type;\n  }\n  if (!i) {\n    var a = u + 'value \"' + t + '\" should be of type \"' + o + '\"';\n    return !1 === n ? (y(a), !1) : a;\n  }\n  if (d(r, \"validator\") && O(r.validator)) {\n    var f = y,\n      v = [];\n    if (y = function (e) {\n      v.push(e);\n    }, i = r.validator(t), y = f, !i) {\n      var p = (v.length > 1 ? \"* \" : \"\") + v.join(\"\\n* \");\n      return v.length = 0, !1 === n ? (y(p), i) : p;\n    }\n  }\n  return i;\n}\nfunction T(e, t) {\n  var n = Object.defineProperties(t, {\n      _vueTypes_name: {\n        value: e,\n        writable: !0\n      },\n      isRequired: {\n        get: function () {\n          return this.required = !0, this;\n        }\n      },\n      def: {\n        value: function (e) {\n          return void 0 !== e || this.default ? O(e) || !0 === _(this, e, !0) ? (this.default = b(e) ? function () {\n            return [].concat(e);\n          } : s(e) ? function () {\n            return Object.assign({}, e);\n          } : e, this) : (y(this._vueTypes_name + ' - invalid default value: \"' + e + '\"'), this) : this;\n        }\n      }\n    }),\n    r = n.validator;\n  return O(r) && (n.validator = j(r, n)), n;\n}\nfunction w(e, t) {\n  var n = T(e, t);\n  return Object.defineProperty(n, \"validate\", {\n    value: function (e) {\n      return O(this.validator) && y(this._vueTypes_name + \" - calling .validate() will overwrite the current custom validator function. Validator info:\\n\" + JSON.stringify(this)), this.validator = j(e, this), this;\n    }\n  });\n}\nfunction k(e, t, n) {\n  var r,\n    o,\n    u = (r = t, o = {}, Object.getOwnPropertyNames(r).forEach(function (e) {\n      o[e] = Object.getOwnPropertyDescriptor(r, e);\n    }), Object.defineProperties({}, o));\n  if (u._vueTypes_name = e, !s(n)) return u;\n  var a,\n    f,\n    c = n.validator,\n    l = i(n, [\"validator\"]);\n  if (O(c)) {\n    var v = u.validator;\n    v && (v = null !== (f = (a = v).__original) && void 0 !== f ? f : a), u.validator = j(v ? function (e) {\n      return v.call(this, e) && c.call(this, e);\n    } : c, u);\n  }\n  return Object.assign(u, l);\n}\nfunction P(e) {\n  return e.replace(/^(?!\\s*$)/gm, \"  \");\n}\nvar x = function () {\n    return w(\"any\", {});\n  },\n  A = function () {\n    return w(\"function\", {\n      type: Function\n    });\n  },\n  E = function () {\n    return w(\"boolean\", {\n      type: Boolean\n    });\n  },\n  N = function () {\n    return w(\"string\", {\n      type: String\n    });\n  },\n  q = function () {\n    return w(\"number\", {\n      type: Number\n    });\n  },\n  S = function () {\n    return w(\"array\", {\n      type: Array\n    });\n  },\n  V = function () {\n    return w(\"object\", {\n      type: Object\n    });\n  },\n  F = function () {\n    return T(\"integer\", {\n      type: Number,\n      validator: function (e) {\n        return h(e);\n      }\n    });\n  },\n  D = function () {\n    return T(\"symbol\", {\n      validator: function (e) {\n        return \"symbol\" == typeof e;\n      }\n    });\n  };\nfunction L(e, t) {\n  if (void 0 === t && (t = \"custom validation failed\"), \"function\" != typeof e) throw new TypeError(\"[VueTypes error]: You must provide a function as argument\");\n  return T(e.name || \"<<anonymous function>>\", {\n    validator: function (n) {\n      var r = e(n);\n      return r || y(this._vueTypes_name + \" - \" + t), r;\n    }\n  });\n}\nfunction Y(e) {\n  if (!b(e)) throw new TypeError(\"[VueTypes error]: You must provide an array as argument.\");\n  var t = 'oneOf - value should be one of \"' + e.join('\", \"') + '\".',\n    n = e.reduce(function (e, t) {\n      if (null != t) {\n        var n = t.constructor;\n        -1 === e.indexOf(n) && e.push(n);\n      }\n      return e;\n    }, []);\n  return T(\"oneOf\", {\n    type: n.length > 0 ? n : void 0,\n    validator: function (n) {\n      var r = -1 !== e.indexOf(n);\n      return r || y(t), r;\n    }\n  });\n}\nfunction B(e) {\n  if (!b(e)) throw new TypeError(\"[VueTypes error]: You must provide an array as argument\");\n  for (var t = !1, n = [], r = 0; r < e.length; r += 1) {\n    var i = e[r];\n    if (m(i)) {\n      if (g(i) && \"oneOf\" === i._vueTypes_name) {\n        n = n.concat(i.type);\n        continue;\n      }\n      if (O(i.validator) && (t = !0), !0 !== i.type && i.type) {\n        n = n.concat(i.type);\n        continue;\n      }\n    }\n    n.push(i);\n  }\n  return n = n.filter(function (e, t) {\n    return n.indexOf(e) === t;\n  }), T(\"oneOfType\", t ? {\n    type: n,\n    validator: function (t) {\n      var n = [],\n        r = e.some(function (e) {\n          var r = _(g(e) && \"oneOf\" === e._vueTypes_name ? e.type || null : e, t, !0);\n          return \"string\" == typeof r && n.push(r), !0 === r;\n        });\n      return r || y(\"oneOfType - provided value does not match any of the \" + n.length + \" passed-in validators:\\n\" + P(n.join(\"\\n\"))), r;\n    }\n  } : {\n    type: n\n  });\n}\nfunction I(e) {\n  return T(\"arrayOf\", {\n    type: Array,\n    validator: function (t) {\n      var n,\n        r = t.every(function (t) {\n          return !0 === (n = _(e, t, !0));\n        });\n      return r || y(\"arrayOf - value validation error:\\n\" + P(n)), r;\n    }\n  });\n}\nfunction J(e) {\n  return T(\"instanceOf\", {\n    type: e\n  });\n}\nfunction M(e) {\n  return T(\"objectOf\", {\n    type: Object,\n    validator: function (t) {\n      var n,\n        r = Object.keys(t).every(function (r) {\n          return !0 === (n = _(e, t[r], !0));\n        });\n      return r || y(\"objectOf - value validation error:\\n\" + P(n)), r;\n    }\n  });\n}\nfunction R(e) {\n  var t = Object.keys(e),\n    n = t.filter(function (t) {\n      var n;\n      return !!(null === (n = e[t]) || void 0 === n ? void 0 : n.required);\n    }),\n    r = T(\"shape\", {\n      type: Object,\n      validator: function (r) {\n        var i = this;\n        if (!s(r)) return !1;\n        var o = Object.keys(r);\n        if (n.length > 0 && n.some(function (e) {\n          return -1 === o.indexOf(e);\n        })) {\n          var u = n.filter(function (e) {\n            return -1 === o.indexOf(e);\n          });\n          return y(1 === u.length ? 'shape - required property \"' + u[0] + '\" is not defined.' : 'shape - required properties \"' + u.join('\", \"') + '\" are not defined.'), !1;\n        }\n        return o.every(function (n) {\n          if (-1 === t.indexOf(n)) return !0 === i._vueTypes_isLoose || (y('shape - shape definition does not include a \"' + n + '\" property. Allowed keys: \"' + t.join('\", \"') + '\".'), !1);\n          var o = _(e[n], r[n], !0);\n          return \"string\" == typeof o && y('shape - \"' + n + '\" property validation error:\\n ' + P(o)), !0 === o;\n        });\n      }\n    });\n  return Object.defineProperty(r, \"_vueTypes_isLoose\", {\n    writable: !0,\n    value: !1\n  }), Object.defineProperty(r, \"loose\", {\n    get: function () {\n      return this._vueTypes_isLoose = !0, this;\n    }\n  }), r;\n}\nvar $ = function () {\n  function e() {}\n  return e.extend = function (e) {\n    var t = this;\n    if (b(e)) return e.forEach(function (e) {\n      return t.extend(e);\n    }), this;\n    var n = e.name,\n      r = e.validate,\n      o = void 0 !== r && r,\n      u = e.getter,\n      a = void 0 !== u && u,\n      f = i(e, [\"name\", \"validate\", \"getter\"]);\n    if (d(this, n)) throw new TypeError('[VueTypes error]: Type \"' + n + '\" already defined');\n    var c,\n      l = f.type;\n    return g(l) ? (delete f.type, Object.defineProperty(this, n, a ? {\n      get: function () {\n        return k(n, l, f);\n      }\n    } : {\n      value: function () {\n        var e,\n          t = k(n, l, f);\n        return t.validator && (t.validator = (e = t.validator).bind.apply(e, [t].concat([].slice.call(arguments)))), t;\n      }\n    })) : (c = a ? {\n      get: function () {\n        var e = Object.assign({}, f);\n        return o ? w(n, e) : T(n, e);\n      },\n      enumerable: !0\n    } : {\n      value: function () {\n        var e,\n          t,\n          r = Object.assign({}, f);\n        return e = o ? w(n, r) : T(n, r), r.validator && (e.validator = (t = r.validator).bind.apply(t, [e].concat([].slice.call(arguments)))), e;\n      },\n      enumerable: !0\n    }, Object.defineProperty(this, n, c));\n  }, t(e, null, [{\n    key: \"any\",\n    get: function () {\n      return x();\n    }\n  }, {\n    key: \"func\",\n    get: function () {\n      return A().def(this.defaults.func);\n    }\n  }, {\n    key: \"bool\",\n    get: function () {\n      return E().def(this.defaults.bool);\n    }\n  }, {\n    key: \"string\",\n    get: function () {\n      return N().def(this.defaults.string);\n    }\n  }, {\n    key: \"number\",\n    get: function () {\n      return q().def(this.defaults.number);\n    }\n  }, {\n    key: \"array\",\n    get: function () {\n      return S().def(this.defaults.array);\n    }\n  }, {\n    key: \"object\",\n    get: function () {\n      return V().def(this.defaults.object);\n    }\n  }, {\n    key: \"integer\",\n    get: function () {\n      return F().def(this.defaults.integer);\n    }\n  }, {\n    key: \"symbol\",\n    get: function () {\n      return D();\n    }\n  }]), e;\n}();\nfunction z(e) {\n  var i;\n  return void 0 === e && (e = {\n    func: function () {},\n    bool: !0,\n    string: \"\",\n    number: 0,\n    array: function () {\n      return [];\n    },\n    object: function () {\n      return {};\n    },\n    integer: 0\n  }), (i = function (i) {\n    function o() {\n      return i.apply(this, arguments) || this;\n    }\n    return r(o, i), t(o, null, [{\n      key: \"sensibleDefaults\",\n      get: function () {\n        return n({}, this.defaults);\n      },\n      set: function (t) {\n        this.defaults = !1 !== t ? n({}, !0 !== t ? t : e) : {};\n      }\n    }]), o;\n  }($)).defaults = n({}, e), i;\n}\n$.defaults = {}, $.custom = L, $.oneOf = Y, $.instanceOf = J, $.oneOfType = B, $.arrayOf = I, $.objectOf = M, $.shape = R, $.utils = {\n  validate: function (e, t) {\n    return !0 === _(t, e, !0);\n  },\n  toType: function (e, t, n) {\n    return void 0 === n && (n = !1), n ? w(e, t) : T(e, t);\n  }\n};\nvar C = function (e) {\n  function t() {\n    return e.apply(this, arguments) || this;\n  }\n  return r(t, e), t;\n}(z());\nexport default C;\nexport { x as any, S as array, I as arrayOf, E as bool, z as createTypes, L as custom, k as fromType, A as func, J as instanceOf, F as integer, q as number, V as object, M as objectOf, Y as oneOf, B as oneOfType, R as shape, N as string, D as symbol, T as toType, w as toValidableType, _ as validateType };","map":{"version":3,"mappings":"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","names":["isObjectObject","o","val","Array","isArray","Object","prototype","toString","call","ObjProto","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","getType","fn","type","match","isPlainObject","ctor","prot","constructor","identity","arg","warn","process","env","NODE_ENV","hasConsole","console","msg","has","obj","prop","isInteger","Number","value","isFinite","Math","floor","isFunction","isVueTypeDef","isComplexType","some","k","bindTo","ctx","defineProperty","bind","validateType","silent","typeToCheck","valid","expectedType","namePrefix","_vueTypes_name","undefined","required","map","join","getNativeType","validator","oldWarn","warnLog","push","length","toType","name","defineProperties","writable","isRequired","get","this","def","default","assign","toValidableType","JSON","stringify","fromType","source","props","descriptors","copy","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","rest","prevValidator","__original","indent","string","replace","any","func","Function","bool","Boolean","String","number","array","object","integer","symbol","custom","validatorFn","warnMsg","TypeError","oneOf","arr","allowedTypes","reduce","ret","v","constr","indexOf","oneOfType","hasCustomValidators","nativeChecks","i","concat","filter","t","err","res","arrayOf","values","vResult","every","instanceOf","instanceConstructor","objectOf","keys","shape","requiredKeys","_obj$key","valueKeys","req","missing","_this","_vueTypes_isLoose","BaseVueTypes","extend","p","validate","getter","opts","descriptor","typeOptions","enumerable","defaults","createTypes","defs","validable","VueTypes"],"sources":["../node_modules/is-plain-object/index.es.js","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts"],"sourcesContent":["/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(val) {\n  return val != null && typeof val === 'object' && Array.isArray(val) === false;\n}\n\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObjectObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport default isPlainObject;\n","import _isPlainObject from 'is-plain-object'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string) => string | void = identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg) {\n        // eslint-disable-next-line no-console\n        console.warn(`[VueTypes warn]: ${msg}`)\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T extends any, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = (value: unknown): value is Function =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) && has(value, '_vueTypes_name')\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx), '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined && !this.default) {\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors)\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator)\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              prevValidator.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n","import { toType, toValidableType, isInteger } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = () => toValidableType('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = () =>\n  toValidableType('string', {\n    type: String,\n  })\n\nexport const number = () =>\n  toValidableType('number', {\n    type: Number,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = () =>\n  toType('integer', {\n    type: Number,\n    validator(value) {\n      return isInteger(value)\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value) {\n      return typeof value === 'symbol'\n    },\n  })\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<T extends readonly any[]>(arr: T) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr.join('\", \"')}\".`\n  const allowedTypes = arr.reduce((ret, v) => {\n    if (v !== null && v !== undefined) {\n      const constr = (v as any).constructor\n      ret.indexOf(constr) === -1 && ret.push(constr)\n    }\n    return ret\n  }, [] as Prop<T[number]>[])\n\n  return toType<T[number]>('oneOf', {\n    type: allowedTypes.length > 0 ? allowedTypes : undefined,\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  U extends VueProp<any> | Prop<any>,\n  V = InferType<U>\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (isVueTypeDef<V>(type) && type._vueTypes_name === 'oneOf') {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (type.type !== true && type.type) {\n        nativeChecks = nativeChecks.concat(type.type)\n        continue\n      }\n    }\n    nativeChecks.push(type as Prop<V>)\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<V>('oneOfType', {\n      type: nativeChecks,\n    })\n  }\n\n  return toType<V>('oneOfType', {\n    type: nativeChecks,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const t =\n          isVueTypeDef(type) && type._vueTypes_name === 'oneOf'\n            ? type.type || null\n            : type\n        const res = validateType(t, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(\n  obj: { [K in keyof T]: Prop<T[K]> | VueProp<T[K]> },\n): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\n\nclass BaseVueTypes {\n  static defaults: Partial<VueTypesDefaults> = {}\n\n  static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n  static get any() {\n    return any()\n  }\n  static get func() {\n    return func().def(this.defaults.func)\n  }\n  static get bool() {\n    return bool().def(this.defaults.bool)\n  }\n  static get string() {\n    return string().def(this.defaults.string)\n  }\n  static get number() {\n    return number().def(this.defaults.number)\n  }\n  static get array() {\n    return array().def(this.defaults.array)\n  }\n  static get object() {\n    return object().def(this.defaults.object)\n  }\n  static get integer() {\n    return integer().def(this.defaults.integer)\n  }\n  static get symbol() {\n    return symbol()\n  }\n\n  static readonly custom = custom\n  static readonly oneOf = oneOf\n  static readonly instanceOf = instanceOf\n  static readonly oneOfType = oneOfType\n  static readonly arrayOf = arrayOf\n  static readonly objectOf = objectOf\n  static readonly shape = shape\n\n  static extend<T>(props: ExtendProps | ExtendProps[]): T {\n    if (isArray(props)) {\n      props.forEach((p) => this.extend(p))\n      return this as any\n    }\n\n    const { name, validate = false, getter = false, ...opts } = props\n\n    if (has(this, name as any)) {\n      throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n    }\n\n    const { type } = opts\n    if (isVueTypeDef(type)) {\n      // we are using as base type a vue-type object\n\n      // detach the original type\n      // we are going to inherit the parent data.\n      delete opts.type\n\n      if (getter) {\n        return Object.defineProperty(this, name, {\n          get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n        })\n      }\n      return Object.defineProperty(this, name, {\n        value(...args: unknown[]) {\n          const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n          if (t.validator) {\n            t.validator = t.validator.bind(t, ...args)\n          }\n          return t\n        },\n      })\n    }\n\n    let descriptor: PropertyDescriptor\n    if (getter) {\n      descriptor = {\n        get() {\n          const typeOptions = Object.assign({}, opts as PropOptions<T>)\n          if (validate) {\n            return toValidableType<T>(name, typeOptions)\n          }\n          return toType<T>(name, typeOptions)\n        },\n        enumerable: true,\n      }\n    } else {\n      descriptor = {\n        value(...args: T[]) {\n          const typeOptions = Object.assign({}, opts as PropOptions<T>)\n          let ret: VueTypeDef<T>\n          if (validate) {\n            ret = toValidableType<T>(name, typeOptions)\n          } else {\n            ret = toType<T>(name, typeOptions)\n          }\n\n          if (typeOptions.validator) {\n            ret.validator = typeOptions.validator.bind(ret, ...args)\n          }\n          return ret\n        },\n        enumerable: true,\n      }\n    }\n\n    return Object.defineProperty(this, name, descriptor)\n  }\n\n  static utils = {\n    validate<T, U>(value: T, type: U) {\n      return validateType<U, T>(type, value, true) === true\n    },\n    toType<T = unknown>(\n      name: string,\n      obj: PropOptions<T>,\n      validable = false,\n    ): VueTypeDef<T> | VueTypeValidableDef<T> {\n      return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n    },\n  }\n}\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}